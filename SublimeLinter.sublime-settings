// SublimeLinter Preferences â€“ ~lojojaPrefs
// ================================================================
{
    // Set to true to print extra information in the console.
    "debug": false,

    // When in the "background" lint mode, this value determines
    // the minimum delay before a request is send to the linter
    "delay": 0.3,

    // Available gutter themes:
    // Blueberry Cross
    // Blueberry Round
    // Circle
    // Danish Royalty
    // Default
    // Hands
    // Knob
    // Knob Symbol
    // Koloria
    // ProjectIcons
    // Note that you may need to change the "icon" property in "styles"
    // to an icon in the theme (they usually include "warning" and "error")
    "gutter_theme": "Default",

    // Demote the visibility of a class off errors while you're editing.
    // The errors will re-appear after `time_to_idle` and immediately on save.
    // - ws_regions: erroneous regions that contain whitespace
    // - warnings: errors of the "warning" type
    // - all: demote all the things
    // - none: disable this feature
    "highlights.demote_while_editing": "none",

    // Apply a color (via scope) to the demoted errors.
    // E.g. "" will hide the errors, "comment" is usually a subtle color.
    "highlights.demote_scope": "",

    // How long to wait before showing the demoted errors again.
    "highlights.time_to_idle": 5,

    // Send `terminate` signal to old lint processes, if their result would
    // be thrown away. If false we fire-and-forget processes instead.
    "kill_old_processes": false,

    // Lint Modes determine when the linter is run
    // background: asynchronously on every change
    // load_save: when a file is opened and every time it's saved
    // manual: only when calling the Lint This View command
    // save: only when a file is saved
    "lint_mode": "background",

    // Example of linter specific settings.
    // Linter specific settings can also be changed in sublime-project settings.
    // What settings are available is documented in the readme of the
    // specific linter plugin.
    // "linters": {
    //     "somelinter": {
    //         "disable": false,
    //         "args": [],
    //         "excludes": [],
    //         "styles": [
    //              {
    //                  "icon": "diamond"
    //              }
    //         ]
    //     },
    //     "somepythonlinter": {
    //         "python": null,
    //         "disable": false,
    //         "args": [
    //             "--max-complexity", "-1",
    //             "--max-line-length", "100",
    //             "--ignore", "E731,E402"
    //         ],
    //         "excludes": [],
    //     }
    // }
    "linters": {
        "csslint": {
            "disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "errors": [],
            "warnings": [],
            "ignore": [
                "empty-rules",
                "important"
            ],
            "selector": "source.css - meta.attribute-with-value"
        },
        "eslint": {
            "disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "selector": "source.js - meta.attribute-with-value"
        },
        "flake8": {
            "disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "executable": "",
            "selector": "source.python"
        },
        "json": {
            "disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "strict": true,
            "selector": "source.json - source.json.sublime"
        },
        "php": {
            "disable": true,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "cmd": "",
            "selector": "embedding.php, source.php, text.html.basic"
        },
        "sublimesyntax": {
            "disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "selector": "source.json.sublime, source.yaml.sublime, text.xml.sublime"
        },
        "xmllint": {
            "disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "selector": "text.xml - text.xml.sublime"
        },
        "yamllint": {
            "@disable": false,
            "args": [],
            "working_dir": "",
            "excludes": [],
            "selector": "source.yaml - source.yaml.sublime"
        }
    },

    // Determines what happens when a linter reports a problem without column.
    // By default, a mark is put in the gutter and the first character is highlighted.
    // If this setting is `true`, the entire line is also highlighted.
    "no_column_highlights_line": false,

    // Provide extra paths to be searched when locating system executables.
    "paths": {
        "linux": [],
        "osx": ["/usr/local/bin"],
        "windows": []
    },

    // Show a report for problems on a line by hovering over the gutter.
    "show_hover_line_report": true,

    // Show a report for problems on a region by hovering over it.
    "show_hover_region_report": true,

    // Highlight problems in the minimap.
    "show_marks_in_minimap": false,

    // Show the output panel on save if there are problems.
    // Note: currently works best with lint_mode "background", See #1200
    // Set to "window" to check if the window has problems.
    // Set to "view" to only check the current file.
    // Set to "never" to disable this feature.
    "show_panel_on_save": "never",

    // Display counters in the status bar.
    // The {}'s will be replaced by warnings and errors respectively.
    // Example alternative: (w:{}, e:{})
    "statusbar.counters_template": "(w:{}|e:{})",

    // Show the messages for problems at your cursor position
    // {message} will be replaced by the actual messages.
    // {linter} will be replaced by the linter reporting the error.
    // {type} will be replaced by either warning or error.
    // {code} will be replaced by the error code.
    // Set to "" to display nothing
    "statusbar.messages_template": "{message}",

    "statusbar.show_active_linters": true,

    // Global styles for all linters.
    // - mark_style options:
    //   "none"
    //   "fill", "outline",
    //   "solid_underline", "squiggly_underline", "stippled_underline"
    //   The underline styles are replaced with outlines when there is
    //   whitespace in the problem region, because underlines aren't drawn
    //   on whitespace (ST issue #137).
    // - priority determines which mark is shown in the gutter;
    //   error marks will still always override warning marks.
    // - scope is used to determine the color;
    //   region.<colorish> are automatically generated scopes in ST > 3148.
    // - types is an array which can contain "warning" and/or "error".
    // - codes is an array which can contain error codes provided by a linter.
    // - icon can be:
    //   one of the default icons: "circle", "dot" or "bookmark"
    //   or "none" to remove the icon
    //   or a path to an icon file like
    //      "Packages/SublimeLinter/gutter-themes/Blueberry Cross/error.png"
    //   or one provided by a gutter theme (e.g. "warning" or "error")
    //      in theme Default: "warning", "error", "cog", "x",
    //      and "diamond", "heart", "pointer", "square", "star", "triangle" all
    //      also have an -outline variant.
    // Note: At least one of those targets is required: types or codes.
    // Styles can also be specified per linter.
    "styles": [
        {
            "scope": "region.yellowish markup.warning.sublime_linter",
            "types": ["warning"]
        },
        {
            "scope": "region.redish markup.error.sublime_linter",
            "types": ["error"]
        },
        {
            "priority": 1,
            "icon": "dot",
            "mark_style": "outline"
        }
    ],

    // Maps variant syntaxes to the syntax that you have a linter for.
    // The syntax is the name of the syntax definition file, in lower case
    // Run this in the console to find it: view.settings().get('syntax').lower()
    "syntax_map": {}
}
